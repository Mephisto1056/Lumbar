volumes:
  kafka_data:
  minio_data:
  redis_data:
  mysql_data:
  mongo_data:
  milvus_etcd:
  milvus_minio:
  milvus_data:
  model_weights:
  sandbox_volume:
  mysql_migrations:

services:
  # --- 基础设施服务 ---
  kafka-init:
    build:
      context: ./init-kafka  # 指向包含 Dockerfile 和脚本的目录
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - KAFKA_PARTITIONS_NUMBER=${KAFKA_PARTITIONS_NUMBER}
      - KAFKA_REPLICATION_FACTOR=${KAFKA_REPLICATION_FACTOR:-1}
    networks:
      - layra-net

  kafka:
    image: bitnami/kafka:3.8.0
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_MAX_MESSAGE_SIZE=2097152000
      - KAFKA_MESSAGE_MAX_BYTES=2097152000
      - KAFKA_CFG_NUM_PARTITIONS=${KAFKA_PARTITIONS_NUMBER:-10}  # 添加分区数配置
    volumes:
      - kafka_data:/bitnami/kafka/data
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10

  minio:
    image: minio/minio:RELEASE.2024-10-13T13-34-11Z
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

  mongodb:
    image: mongo:7.0.12
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7.2.5
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  mysql:
    image: mysql:9.0.1
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 10

  milvus-etcd:
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - milvus_etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 10s
      timeout: 5s
      retries: 10

  milvus-minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    command: minio server /minio_data --console-address ":9001"
    volumes:
      - milvus_minio:/minio_data
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

  milvus-standalone:
    image: milvusdb/milvus:v2.5.6
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      - ETCD_ENDPOINTS=milvus-etcd:2379
      - MINIO_ADDRESS=milvus-minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    depends_on:
      milvus-etcd:
        condition: service_healthy
      milvus-minio:
        condition: service_healthy
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 10s
      start_period: 30s
      timeout: 5s
      retries: 30

  # --- 应用服务 ---
  python-sandbox:
    build:
      context: ./sandbox
    image: python-sandbox
    volumes:
      - sandbox_volume:/shared
    networks:
      - layra-net

  model-weights-init:
    build:
      context: ./init-db
      dockerfile: Dockerfile
    volumes:
      - model_weights:/model_weights
    environment:
      - MODEL_BASE_URL=${MODEL_BASE_URL}
    networks:
      - layra-net

  # 新增 unoserver 服务
  unoserver:
    build:
      context: ./unoserver
    environment:
      - UNOSERVER_INSTANCES=${UNOSERVER_INSTANCES:-1}  # 实例数=CPU核心数
      - BASE_PORT=${UNOSERVER_BASE_PORT}
      - BASE_UNO_PORT=${UNOSERVER_BASE_UNO_PORT}
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2003"]  # 检查第一个实例
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
      
  backend:
    build:
      context: ./backend
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      milvus-standalone:
        condition: service_healthy
      model-server:
        condition: service_healthy
      unoserver:
        condition: service_healthy
      model-weights-init:
        condition: service_completed_successfully
    volumes:
      - model_weights:/model_weights
      - /var/run/docker.sock:/var/run/docker.sock
      - sandbox_volume:${SANDBOX_SHARED_VOLUME}
      - mysql_migrations:/app/migrations_previous
    environment:
      - MAX_WORKERS=${MAX_WORKERS}
      - LOG_LEVEL=${LOG_LEVEL}
      - DB_URL=${DB_URL}
      - DB_POOL_SIZE=${DB_POOL_SIZE}
      - DB_MAX_OVERFLOW=${DB_MAX_OVERFLOW}
      - REDIS_URL=${REDIS_URL}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_TOKEN_DB=${REDIS_TOKEN_DB}
      - REDIS_TASK_DB=${REDIS_TASK_DB}
      - REDIS_LOCK_DB=${REDIS_LOCK_DB}
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - MONGODB_URL=${MONGODB_URL}
      - MONGODB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGODB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGODB_DB=${MONGODB_DB}
      - MONGODB_POOL_SIZE=${MONGODB_POOL_SIZE}
      - MONGODB_MIN_POOL_SIZE=${MONGODB_MIN_POOL_SIZE}
      - KAFKA_BROKER_URL=${KAFKA_BROKER_URL}
      - KAFKA_TOPIC=${KAFKA_TOPIC}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID}
      - MINIO_URL=${MINIO_URL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET_NAME=${MINIO_BUCKET_NAME}
      - DEBUG_MODE=${DEBUG_MODE}
      - MILVUS_URI=${MILVUS_URI}
      - COLBERT_MODEL_PATH=${COLBERT_MODEL_PATH}
      - SANDBOX_SHARED_VOLUME=${SANDBOX_SHARED_VOLUME}
      - SERVER_IP=${SERVER_IP}
      - UNOSERVER_INSTANCES=${UNOSERVER_INSTANCES}
      - UNOSERVER_HOST=${UNOSERVER_HOST}
      - UNOSERVER_BASE_PORTS=${UNOSERVER_BASE_PORT}
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/check"]
      interval: 30s
      start_period: 10s
      timeout: 5s
      retries: 10

  model-server:
    build:
      context: ./model-server
      dockerfile: Dockerfile.omni  # 使用新的Dockerfile
    depends_on:
      model-weights-init:
        condition: service_completed_successfully
    volumes:
      - model_weights:/model_weights
      - /tmp:/tmp  # 临时文件处理
      - /dev/shm:/dev/shm  # 映射共享内存
    environment:
      - COLBERT_MODEL_PATH=${COLBERT_MODEL_PATH}
      - COLQWEN_OMNI_MODEL_PATH=${COLQWEN_OMNI_MODEL_PATH:-/model_weights/colqwen-omni-v0.1}
      - COLQWEN_OMNI_BASE_PATH=${COLQWEN_OMNI_BASE_PATH:-/model_weights/colqwen2.5omni-base}
      - MODEL_TYPE=${MODEL_TYPE:-omni}
      - AUDIO_SEGMENT_DURATION=${AUDIO_SEGMENT_DURATION:-30}
      - MAX_AUDIO_DURATION=${MAX_AUDIO_DURATION:-3600}
      - AUDIO_SAMPLE_RATE=${AUDIO_SAMPLE_RATE:-16000}
      - VIDEO_FRAME_INTERVAL=${VIDEO_FRAME_INTERVAL:-1}
      - MAX_VIDEO_DURATION=${MAX_VIDEO_DURATION:-7200}
      - MAX_VIDEO_SIZE=${MAX_VIDEO_SIZE:-1073741824}  # 增加到1GB
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-1073741824}    # 添加通用文件大小限制
      - SUPPORTED_AUDIO_FORMATS=${SUPPORTED_AUDIO_FORMATS:-mp3,wav,flac,aac,ogg,m4a}
      - SUPPORTED_VIDEO_FORMATS=${SUPPORTED_VIDEO_FORMATS:-mp4,avi,mov,mkv,wmv,flv,webm}
      - SUPPORTED_IMAGE_FORMATS=${SUPPORTED_IMAGE_FORMATS:-jpg,jpeg,png,bmp,gif,tiff,webp}
      - NVIDIA_VISIBLE_DEVICES=all  # 暴露所有 GPU
      - PYTHONUNBUFFERED=1
      - TORCH_HOME=/model_weights/.torch  # 缓存目录
      - OMP_NUM_THREADS=4  # 限制OpenMP线程数
      - MKL_NUM_THREADS=4  # 限制MKL线程数
    networks:
      - layra-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/healthy-check"]
      interval: 60s
      start_period: 180s  # 进一步增加启动时间，音视频模型加载需要更多时间
      timeout: 20s
      retries: 8
    # 添加 GPU 支持配置和更多资源
    deploy:
      resources:
        limits:
          memory: 24G  # 增加内存限制到24G，音视频+模型需要更多内存
          cpus: '8'    # 限制CPU使用
        reservations:
          memory: 12G  # 预留12G内存
          cpus: '4'    # 预留4个CPU核心
          devices:
            - driver: nvidia
              count: 1  # 使用 1 块 GPU
              capabilities: [gpu]
    # 增加共享内存，用于音视频处理和大模型推理
    shm_size: 4g
    # 添加重启策略
    restart: unless-stopped
    # 增加ulimits来处理大文件
    ulimits:
      memlock:
        soft: -1
        hard: -1
      stack:
        soft: 67108864
        hard: 67108864

  frontend:
    build:
      context: ./frontend
      args:
        - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
        - MINIO_IMAGE_URL_PREFIX=${MINIO_IMAGE_URL_PREFIX}
        - MINIO_URL=${MINIO_URL}
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV}
    networks:
      - layra-net

  nginx:
    image: nginx:alpine
    depends_on:
      - frontend
      - backend
    ports:
      - "8800:80"
      # - "443:443" # 如需 HTTPS 可启用
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf
      # - ./frontend/ssl:/etc/nginx/ssl # 如需 HTTPS
    networks:
      - layra-net

networks:
  layra-net:
    driver: bridge
